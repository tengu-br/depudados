{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/tengu/dev/depudados/components/CtaOne.js\";\nimport React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst CtaOne = () => {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"border-top pt-110 pb-150\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 12,\n          lg: 10,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"download-app-inner text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"h1\",\n              children: \"Desafios e Conquistas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 11,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginBottom: '1em',\n                marginTop: '2em'\n              },\n              children: \"Primeiros problemas:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 14,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"A princ\\xEDpio eu havia planejado chamar a API p\\xFAblica do governo direto do front-end a fim de agilizar o processo de desenvolvimento. Por\\xE9m percebi que a performance e experi\\xEAncia de usu\\xE1rio estavam sendo afetadas pelo grande n\\xFAmero de chamadas e consequente tempo de espera. Para solucionar isso, acabei optando por criar um back-end que pr\\xE9-processasse os dados e os armazenasse em um banco de dados.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginBottom: '1em',\n                marginTop: '2em'\n              },\n              children: \"Maior desafio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Sem d\\xFAvidas o tempo foi o maior obst\\xE1culo. S\\xF3 encontrei o an\\xFAncio da vaga quando fui compartilhar um post do perfil do instagram do Nexo e vi o highlight. Ao mesmo tempo que queria entregar um projeto bacana, estava (e ainda estou) com receio de demorar de mais e encontrar todas as vagas preenchidas! Esse foi um fator determinante para v\\xE1rias decis\\xF5es feitas para a execu\\xE7\\xE3o do projeto, mas que podem (e gostaria que fossem) melhoradas.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Um exemplo disso \\xE9 a maneira ineficaz da coleta de dados. Atualmente o back-end atualiza todos os dados uma vez por dia e sobrescreve os dados antigos. Isso pode ser melhorado com uma metodologia semelhante ao do git, onde apenas as mudan\\xE7as s\\xE3o atualizadas e registradas, e n\\xE3o todo o c\\xF3digo - ou nesse caso, dados.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginBottom: '1em',\n                marginTop: '2em'\n              },\n              children: \"Ideias n\\xE3o exploradas:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"J\\xE1 que os dados s\\xE3o todos atualizados apenas uma vez por dia, seria interessante implementar um CI/CD onde ap\\xF3s a coleta de dados, eles fossem armazenados dentro do next.js e o site fosse 'buildado' novamente tratando esses dados recentes como dados est\\xE1ticos (por um dia). Isso possibilitaria um SSR completo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/presenca\",\n              className: \"btn\",\n              children: \"Navegar!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CtaOne;","map":{"version":3,"sources":["/home/tengu/dev/depudados/components/CtaOne.js"],"names":["React","Container","Row","Col","CtaOne","marginBottom","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,sBACE;AAAS,IAAA,SAAS,EAAC,0BAAnB;AAAA,2BACE,QAAC,SAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,EAAT;AAAa,UAAA,EAAE,EAAE,EAAjB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,gCAAf;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAI,cAAA,KAAK,EAAE;AAAEC,gBAAAA,YAAY,EAAE,KAAhB;AAAuBC,gBAAAA,SAAS,EAAE;AAAlC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAcE;AAAI,cAAA,KAAK,EAAE;AAAED,gBAAAA,YAAY,EAAE,KAAhB;AAAuBC,gBAAAA,SAAS,EAAE;AAAlC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjBF,eAwBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxBF,eA6BE;AAAI,cAAA,KAAK,EAAE;AAAED,gBAAAA,YAAY,EAAE,KAAhB;AAAuBC,gBAAAA,SAAS,EAAE;AAAlC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7BF,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhCF,eAqCE;AAAG,cAAA,IAAI,EAAC,WAAR;AAAoB,cAAA,SAAS,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBArCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CApDD;;AAsDA,eAAeF,MAAf","sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst CtaOne = () => {\r\n  return (\r\n    <section className=\"border-top pt-110 pb-150\">\r\n      <Container>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md={12} lg={10}>\r\n            <div className=\"download-app-inner text-center\">\r\n              <h1 className=\"h1\">\r\n                Desafios e Conquistas\r\n              </h1>\r\n              <h4 style={{ marginBottom: '1em', marginTop: '2em' }}>\r\n                Primeiros problemas:\r\n              </h4>\r\n              <p>\r\n                A princípio eu havia planejado chamar a API pública do governo direto do front-end a fim\r\n                de agilizar o processo de desenvolvimento. Porém percebi que a performance e experiência\r\n                de usuário estavam sendo afetadas pelo grande número de chamadas e consequente tempo de espera.\r\n                Para solucionar isso, acabei optando por criar um back-end que pré-processasse os dados e\r\n                os armazenasse em um banco de dados.\r\n              </p>\r\n              <h4 style={{ marginBottom: '1em', marginTop: '2em' }}>\r\n                Maior desafio:\r\n              </h4>\r\n              <p>\r\n                Sem dúvidas o tempo foi o maior obstáculo. Só encontrei o anúncio da vaga quando fui compartilhar\r\n                um post do perfil do instagram do Nexo e vi o highlight. Ao mesmo tempo que queria entregar um\r\n                projeto bacana, estava (e ainda estou) com receio de demorar de mais e encontrar todas as vagas\r\n                preenchidas! Esse foi um fator determinante para várias decisões feitas para a execução do projeto,\r\n                mas que podem (e gostaria que fossem) melhoradas.\r\n              </p>\r\n              <p>\r\n                Um exemplo disso é a maneira ineficaz da coleta de dados. Atualmente o back-end atualiza todos os dados\r\n                uma vez por dia e sobrescreve os dados antigos. Isso pode ser melhorado com uma metodologia semelhante\r\n                ao do git, onde apenas as mudanças são atualizadas e registradas, e não todo o código - ou nesse caso, dados.\r\n              </p>\r\n              <h4 style={{ marginBottom: '1em', marginTop: '2em' }}>\r\n                Ideias não exploradas:\r\n              </h4>\r\n              <p>\r\n                Já que os dados são todos atualizados apenas uma vez por dia, seria interessante implementar um CI/CD onde\r\n                após a coleta de dados, eles fossem armazenados dentro do next.js e o site fosse 'buildado' novamente tratando\r\n                esses dados recentes como dados estáticos (por um dia). Isso possibilitaria um SSR completo\r\n              </p>\r\n              <a href=\"/presenca\" className=\"btn\">\r\n                Navegar!\r\n              </a>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CtaOne;\r\n"]},"metadata":{},"sourceType":"module"}